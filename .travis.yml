branches:
  # PRs are always built. So we exclude branch builds other than master to prevent double-builds.
  # https://stackoverflow.com/questions/31882306/how-to-configure-travis-ci-to-build-pull-requests-merges-to-master-w-o-redunda
  only:
    - master

# Job queue; see below for default job settings.
jobs:
# [Job] [Docker] multi-ach: https://www.docker.com/blog/multi-arch-build-what-about-travis/
- name: "Docker"
  language: node_js
  dist: bionic
  sudo: required
  os: linux
  arch: amd64
  # services:
  #   - docker
  before_install:
    - npm install -g npm
    # Install Docker 19.x, not 18
    - curl -fsSL https://get.docker.com | sh
    - echo '{"experimental":"enabled"}' | sudo tee /etc/docker/daemon.json
    - mkdir -p $HOME/.docker
    - echo '{"experimental":"enabled"}' | sudo tee $HOME/.docker/config.json
    - sudo service docker start
    - docker --version
    # Install docker-buildx plugin for cross-architecture compilation.
    - mkdir -p ~/.docker/cli-plugins/
    - curl -fsSL -o ~/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.4.1/buildx-v0.4.1.linux-amd64
    - chmod a+x ~/.docker/cli-plugins/docker-buildx
    - docker context ls
  install:
    # With a multi-arch build, installing on the host machine first is faster.
    - npm install
    # Create a multi-arch buildx user: https://github.com/docker/buildx/issues/138
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --platform linux/arm64,linux/arm/v7 --name xbuilder --use
    - docker buildx inspect --bootstrap
  script:
    - echo "Building $CI_SEMVER"
    # Pre-build assets; this prevents the multi-arch from running each build in the Dockerfile.
    - npm run build-latest
    # Only the master branch supports a "deploy" step. For others, go ahead and push a dev image.
    - scripts/docker.sh build
  after_success: [] # Override.
  addons:
    apt:
      packages:
        - qemu-user-static # multi-arch build tools
        - icnsutils
        - graphicsmagick
        - gcc-multilib
        - g++-multilib
        - rpm
  deploy:
    skip_cleanup: true # Leave build artifacts in place (don't git clean)
    provider: script
    script: scripts/docker.sh deploy
# [Job] Raspberry Pi Image built with Docker
- name: "Raspbian Lite"
  language: node_js
  sudo: required
  os: linux
  dist: bionic
  services:
    - docker
  script:
  - npm run build-latest
  - scripts/pack-rpi.sh
# [Job] Linux (Electron App)
- name: "Linux"
  os: linux
  script:
  - npm run build-latest
  - npm run build:linux-ia32
  - npm run build:linux-x64
# [Job] MacOS (Electron App)
- name: "MacOS"
  os: osx
  osx_image: xcode8.3
  before_install:
  - brew update
  # before_deploy:
  # - scripts/add-osx-cert.sh
  script:
  - npm run build-latest
  - npm run build:mac-x64
# [Job] Windows (Electron App)
- name: "Windows"
  os: windows
  script:
  - npm run build-latest
  - npm run build:win-x64

# --------------------------------------------------------------------------------------------------
# Default job settings, when not overwritten by specific jobs.
# --------------------------------------------------------------------------------------------------

dist: trusty
group: travis_latest
os: linux
language: node_js
node_js:
  - "12"

before_script:
- chmod -R +x scripts/
- echo "Building $CI_SEMVER (v. $CI_VERSION)"

env:
  global:
    - CI_VERSION=`git describe --tags --abbrev=0`
    - CI_SEMVER=`./scripts/semver.sh $CI_VERSION`
    - TRAVIS_TAG=$CI_VERSION
    - PRODUCT_NAME=Makerverse
    - RELEASE_NAME="${PRODUCT_NAME} v${CI_VERSION}"
    - RELEASE_FILE="makerverse-${CI_SEMVER}"
    - LAST_COMMIT_DATE=`git log -1 --pretty=%cD`
    - secure: oUPdL1AgiHZe6tMaSxXzAVdiAvVE/qN0sPJxDqiK0cSrBBvrRV6YPUmW7otS1bTMcntQlTCGzcZ9EvW2T8WQy6VrjgD+AlVmq83x3iLk9HDI720ShBx5XM1IVP4UTs+B4gI2vtgw9y6pEaMgKc+Z+h6ErJ2BeEWO6DWQg6+HjbhlpRdYrIqaSkLYy8+OR9IGarCuFZFhHsfW1cFlEtznd7W2ngtoswVWOsUPMnhSpSyzrv9B4mxmSsc+JrSo1V1Zk2Rj8vRAOXAHk/9FL26BENyN21cfdH8B9n/W6OMB9nZS4VDpN77YPEXT2rd1DvsBeYVPuwhae1q1b1YcvGSI+zYdsP2VH41BW5jwAw73NxIirMjeRp8V2p3OOneisx2nCbTgmStPuMoUXB3RpsulngMb544GUtnyy4nN852CZA73fUoPRld00d4h/N67hww1nr5tj1N47iAepEzOyjX46TOrSP8rtbFOSz3V8tZU2l1maU52wvq1eOIITR6h5uGhg2Fv0h5oy+vEqxEFC0wsogoRdJjg3ue9T8vIT1yN507zx8raR6hMvZPi25vcL6AAPFfOX+CNkaNEldCnSj3KTjvbUNsXQSLUwvvLIExiWkStms+xr24lOG7R7HOHmbVCCjEmbmk/43s/nwKsde+6BL+RWsOIbzg5Vg0CygruDSg=
    - secure: wGBHpIlosIwoWswLojBOgNjMWgGkbO0cnH3eL5ygyW7l4mOrCGPUPZDzSIYq/PLT86t6xVXZCQtMeVkd/pj5+ZkW3jRND2ugGLlGkAeL6NtlbYiLOxGEI5taSvGNwrUKtEFJVr9dmV5GYXgEEipHLDI1gayyuTEbwN9K0tSi3UXLjL6o4VReMLpIhNCdJX45f6ZxlbWH3Jtely/j3MHeOy2NGf66Zlqd6HwvOoyXmIqVF0G39ZQotMmXE+ym90LgTOb9nQu89yLh2+H57DZRUpaKWPGTU9uDzqhs0n00YIHmKYMmZXME9mT2ltBiivzayYtQH1db6AdjI/LlxviP7sY0yxMMAw1136Kut907u3VkiC0/n6xHcj9dpjEQ8IFaAWDRh9/GjLask5YvcouToM1d7OV3ikZWzQydyRYgPD3HBN8hHP29sD9R9EN8jViSDPqFqjrPT7VwDIpe5UWrCrHV6DC1bv2ehOdWOGhgdS4sSC+t6jgA/HPXyJDiqvW4aLPxhaVFa5G7zlQktYE2NqLYJrVQIuJ9s7TB0Ff3BbXsdu0ae8FAwAl0I/0EUdIYrtvj9Zqh6uiLq9thT+KrQOTxe5i9U8jTR5st8J8dwYXHms3e85OGlpwdXVmlOSlbyeFtLlYbFB1BRvfOV1ftv14scveDVeXynT4UAXCz2d8=

cache:
  directories:
    - $HOME/.electron
    - packer_cache

install: npm install
addons:
  apt:
    packages:
      - icnsutils
      - graphicsmagick
      - gcc-multilib
      - g++-multilib
      - rpm

# By default, everything in the ./releases directory is uploaded as assets to a Github pre-release.
deploy:
  provider: releases
  skip_cleanup: true # Leave build artifacts in place (don't git clean)
  file_glob: true
  file:
    - "releases/*.*"
  token:
    secure: NFvrOvBDkBwvJWANXEbkRtrFE0msZF+269Q4VHWL44izsIF/uTooIPt5FlMBvsroiDunwA6Zs/kX8Nnrf/D1zePybNu9zf8JarJuCzZuu80pWSn2aJQHCqH6mKkprSa6BoqxnptJG7Qdr0e16FaSOiDNE68DRhFYztlLZynf4EdD6k40UkP0k+6+v1Wg6qkNNykexP6SZDOzDBTyOLH3KVYvQdTaaiNL6+B1/HYWVF+D+QwGQVp2/k7FDUkaPJMY+1FLmjGuu/5Snl6I9+HqOEkS0zyrob/9DDZx158KhrfnTfx4IKmACA9lGo1eVFb1ZngupA7VYp329kHd7FVYWFbY1lcc2FdBP74xhilzJ4S1wtvDL6FTRbwTai0B7/c0Tsad31e2/2zucldv7Xh2UAzeCv4SPyihFA7cMpzqXncRH9N/JTTArspn9fFXbGsvU1Xo+0GppMHO0PQf77vjUoT7v6wPyE5OYcd9n1/xrTNTX9mttBF864qYEi8gGdZXaIN5ziaVvmaeYXOFuFww+hmRFGuBlNGueTdsHndAKW8oxPKjcQziiTpjuoWokXjp7zg2UUp9F5azihHo1whPmjNNnzfC8Vu2OHgXb3Nj2ugm1NXMRhTKyRt6Lsa8rKL8ZW8J3WpD65Jcm0Wq42q9JfOOgVn/+vf0olKu5wGT0rc=
  overwrite: true
  name: "[CI] $RELEASE_NAME"
  # Travis does not support multi-line change logs / formatting.
  # body: "$(scripts/changelog.sh)"
  body: "Build #${TRAVIS_BUILD_NUMBER} (${LAST_COMMIT_DATE})"
  prerelease: true